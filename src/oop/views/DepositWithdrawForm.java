package oop.views;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import oop.entities.DurableProductHandler;
import oop.entities.PerishableProductHandler;
import oop.entities.Product;
import oop.entities.ProductHandler;
import oop.utils.ProductType;
import oop.utils.Util;
import oop.views.strategies.UpdateProductStrategy;

/**
 *
 * @author Marci
 */
public class DepositWithdrawForm extends javax.swing.JDialog {

    private ProductHandler handler;
    private Product product;
    private ProductType type;
    private List<ProductEventListener> listeners;
    private ProductHandlingStrategy strategy;

    /**
     * Creates new form DepositWithdrawForm
     *
     * @param type
     * @param product
     */
    public DepositWithdrawForm(ProductType type, Product product) {
        super();
        setModal(false);
        initComponents();
        listeners = new ArrayList<>();
        strategy = new UpdateProductStrategy();
        this.type = type;
        setHandler();
        this.product = product;
        setLocationRelativeTo(null);
    }

    public void addProductEventListener(ProductEventListener l) {
        listeners.add(l);
    }

    public void removeProductEventListener(ProductEventListener l) {
        listeners.remove(l);
    }

    private void notifyListeners(Product product) {
        for (ProductEventListener listener : listeners) {
            strategy.notify(product, listener);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbQuantity = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        btWithdraw = new javax.swing.JButton();
        btDeposit1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbQuantity.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbQuantity.setText("Quantity:");

        tfQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfQuantityKeyTyped(evt);
            }
        });

        btWithdraw.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btWithdraw.setText("Withdraw");
        btWithdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWithdrawActionPerformed(evt);
            }
        });

        btDeposit1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btDeposit1.setText("Deposit");
        btDeposit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeposit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btDeposit1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btWithdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfQuantity)
                    .addComponent(lbQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btWithdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDeposit1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btDeposit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeposit1ActionPerformed
        // TODO add your handling code here:
        int q = getQuantity();
        if (tfQuantity.getText().
                length() > 0) {
            handler.deposit(product, q);
        }
        notifyListeners(product);
        dispose();
    }//GEN-LAST:event_btDeposit1ActionPerformed

    private void btWithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWithdrawActionPerformed
        // TODO add your handling code here:
        int q = getQuantity();
        try {
            if (tfQuantity.getText().
                    length() > 0) {
                handler.withdraw(product, q);
                notifyListeners(product);
                dispose();
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Cannot withdraw more than the available quantity.");
        }
    }//GEN-LAST:event_btWithdrawActionPerformed

    private void tfQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfQuantityKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Util.isBetween('0', '9', c) && c != '\b' || tfQuantity.getText().
                length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_tfQuantityKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeposit1;
    private javax.swing.JButton btWithdraw;
    private javax.swing.JLabel lbQuantity;
    private javax.swing.JTextField tfQuantity;
    // End of variables declaration//GEN-END:variables

    private int getQuantity() {
        return Integer.parseInt(tfQuantity.getText());
    }

    private void setHandler() {
        switch (type) {
            case DURABLE_PRODUCT ->
                handler = new DurableProductHandler();
            case PERISHABLE_PRODUCT ->
                handler = new PerishableProductHandler();
        }
    }
}
